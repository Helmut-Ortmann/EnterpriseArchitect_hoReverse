using System;
using System.Collections.Generic;
using System.Windows.Forms;
using System.Linq;
using System.Text;
using System.Xml;
using System.Text.RegularExpressions;
using System.IO;
using EA;

using Appls;

namespace Utils
{
    public class Util
    {
        public Util()
        {

        }
        public static string getWildCard(Repository rep)
        {
           string cnString = rep.ConnectionString.ToUpper();

            if (cnString.EndsWith(".EAP"))
            {
                   FileInfo f = new FileInfo(cnString);
                   if (f.Length > 20000) return "*";
                        TextReader tr = new StreamReader(cnString);
                        string shortcut = tr.ReadLine().ToUpper();
                        tr.Close();
                        if (shortcut.Contains(".EAP")) return "*";
                        if (shortcut.Contains("DBTYPE=")) return "%";
                return "";

            }
            else { return "%"; }
                
        }
        //--------------------------------------------------------------------------------------------------------------
        // setLineStyleForLink  Set line style for a digram link
        //--------------------------------------------------------------------------------------------------------------
        // linestyle
        // LH = "Line Style: Lateral Horizontal";
        // LV = "Line Style: Lateral Vertical";
        // TH  = "Line Style: Tree Horizontal";
        // TV = "Line Style: Tree Vertical";
        // OS = "Line Style: Orthogonal Square";
        // OR =              Orthogonal Round
        // A =               Automatic
        // D =               Direct
        // C =               Customer

         private static void setLineStyleForDiagramLink(string lineStyle, EA.DiagramLink link)
        {
            if (lineStyle == "D") link.Style = "Mode=1;EOID=A36C0F5C;SOID=3ECFB522;Color=-1;LWidth=0;";
            else if (lineStyle == "A") link.Style = "Mode=2;EOID=A36C0F5C;SOID=3ECFB522;Color=-1;LWidth=0;";
            else if (lineStyle == "C") link.Style = "Mode=3;EOID=A36C0F5C;SOID=3ECFB522;Color=-1;LWidth=0;";
            else
            {
            link.Style = "Mode=3;EOID=A36C0F5C;SOID=3ECFB522;Color=-1;LWidth=0;TREE=" +
                                    lineStyle + ";";

            }
            link.Update();
        }


         //--------------------------------------------------------------------------------------------------------------
         // SetLineStyleDiagramObjectsAndConnector  Set line style for diagram objects and connectors
         //--------------------------------------------------------------------------------------------------------------
         // linestyle
         // LH = "Line Style: Lateral Horizontal";
         // LV = "Line Style: Lateral Vertical";
         // TH  = "Line Style: Tree Horizontal";
         // TV = "Line Style: Tree Vertical";
         // OS = "Line Style: Orthogonal Square";
         // OR =              Orthogonal Round
         // A =               Automatic
         // D =               Direct
         // C =               Customer       
         public static void SetLineStyleDiagramObjectsAndConnector(EA.Repository rep, EA.Diagram d, string lineStyle)
         {
             EA.Collection selectedObjects = d.SelectedObjects;
             EA.Connector selectedConnector = d.SelectedConnector;
             // store current diagram
             rep.SaveDiagram(d.DiagramID);
             foreach (EA.DiagramLink link in d.DiagramLinks)
             {
                 if (link.IsHidden == false)
                 {

                     // check if connecter is connected with diagram object
                     EA.Connector c = rep.GetConnectorByID(link.ConnectorID);
                     foreach (EA.DiagramObject dObject in d.SelectedObjects)
                     {
                         if (c.ClientID == dObject.ElementID | c.SupplierID == dObject.ElementID)
                         {

                             setLineStyleForDiagramLink(lineStyle, link);
                         }
                     }
                     if (selectedConnector != null)
                     {
                         if (c.ConnectorID == selectedConnector.ConnectorID)
                         {
                             setLineStyleForDiagramLink(lineStyle, link);
                             continue;
                         }
                     }
                 }
             }
             rep.ReloadDiagram(d.DiagramID);
             if (selectedConnector != null) d.SelectedConnector = selectedConnector;
             foreach (EA.DiagramObject dObject in selectedObjects)
             {
                 //d.SelectedObjects.AddNew(el.ElementID.ToString(), el.Type);
                 d.SelectedObjects.AddNew(dObject.ElementID.ToString(), dObject.ObjectType.ToString());
             }
             //d.Update();
             d.SelectedObjects.Refresh();
         }

        //--------------------------------------------------------------------------------------------------------------
        // SetLineStyleDiagram  Set line style for a diagram (all visible connectors)
        //--------------------------------------------------------------------------------------------------------------
        // linestyle
        // LH = "Line Style: Lateral Horizontal";
        // LV = "Line Style: Lateral Vertical";
        // TH  = "Line Style: Tree Horizontal";
        // TV = "Line Style: Tree Vertical";
        // OS = "Line Style: Orthogonal Square";
        // OR =              Orthogonal Round
        // A =               Automatic
        // D =               Direct
        // C =               Customer       


        public static void SetLineStyleDiagram(EA.Repository rep, EA.Diagram d, string lineStyle)
        {
            // store current diagram
            rep.SaveDiagram(d.DiagramID);
            // all links
            foreach (EA.DiagramLink link in d.DiagramLinks)
            {
                if (link.IsHidden == false)
                {
                    setLineStyleForDiagramLink(lineStyle, link);
                }

            }
            rep.ReloadDiagram(d.DiagramID);
        }

        
        public static void ChangeClassNameToSynonyms(EA.Repository rep, EA.Element el)
        {
            if (el.Type.Equals("Class"))
            {
                // check if property 'Syynonym' exists
                foreach (EA.TaggedValue tag in el.TaggedValues)
                {
                    if (tag.Name == "typeSynonyms")
                    {
                        if (tag.Value != el.Name)
                        {
                            el.Name = tag.Value;
                            el.Update();
                            break;
                        }
                    }
                }
                foreach (EA.Element elNested in el.Elements)
                {
                    ChangeClassNameToSynonyms(rep, elNested);
                }

            }
        }
        public static void ChangePackageClassNameToSynonyms(EA.Repository rep, EA.Package pkg)
        {
            // All elements in package
            foreach (EA.Element el in pkg.Elements)
            {
                if (el.Type.Equals("Class"))
                {
                    // class nested
                    ChangeClassNameToSynonyms(rep, el);
                }
            }
            // all packages in packages
            foreach (EA.Package pkgNested in pkg.Packages)
            {
                // package nested
                ChangePackageClassNameToSynonyms(rep, pkgNested);
            }
        }


        public static bool updateClass(EA.Repository rep, EA.Element el)
        {

            foreach (EA.Attribute a in el.Attributes)
            {
                Util.updateAttribute(rep, a);
            }
            foreach (EA.Method m in el.Methods)
            {
                Util.updateMethod(rep, m);
            }

            // over all nested classes
            foreach (EA.Element e in el.Elements)
            {
                updateClass(rep, e);
            }
            return true;
        }

        public static bool updatePackage(EA.Repository rep, EA.Package pkg)
        {
            foreach (EA.Element el in pkg.Elements)
            {
                updateClass(rep, el);
            }
            foreach (EA.Package pkg1 in pkg.Packages)
            {
                updatePackage(rep, pkg1);
            }
            
            return true;
        }



        public static bool updateAttribute(EA.Repository rep, EA.Attribute a)
        {
            // no classifier defined
            if (a.ClassifierID == 0)
            {
                // find type from type_name
                int id = Util.getTypeID(rep, a.Type);
                if (id > 0)
                {
                    a.ClassifierID = id;
                    bool error = a.Update();
                    if (!error)
                    {
                        MessageBox.Show("Error write Attribute", a.GetLastError());
                        // Error occured
                        return false;
                    }
                }
            }
            return true;
        }

        // Update Method Types
        public static bool updateMethod(EA.Repository rep, EA.Method m)
        {

            int id;

            // over all parameters
            foreach (EA.Parameter par in m.Parameters)
            {
                if ((par.ClassifierID == "") || (par.ClassifierID == "0"))
                {
                    // find type from type_name
                    id = Util.getTypeID(rep, par.Type);
                    if (id > 0)
                    {
                        par.ClassifierID = id.ToString();
                        bool error = par.Update();
                        if (!error)
                        {
                            MessageBox.Show("Error write Parameter", m.GetLastError());
                            return false;
                            // Error occured
                        }
                    }


                }

            }
            // no classifier defined
            if ((m.ClassifierID == "") || (m.ClassifierID == "0"))
            {
                // find type from type_name
                id = Util.getTypeID(rep, m.ReturnType);
                if (id > 0)
                {
                    m.ClassifierID = id.ToString();
                    bool error = m.Update();
                    if (!error)
                    {
                        MessageBox.Show("Error write Method", m.GetLastError());
                        return false;
                        // Error occured
                    }
                }
            }
            return true;
        }



        // Find type for name
        // 1. Search for name (if type contains a '*' search for type with '*' and for type without '*'
        // 2. Search for Synonyms
        public static int getTypeID(EA.Repository rep, string name)
        {
            int intReturn = 0;
            Boolean isPointer = false;
            if (name.Contains("*")) isPointer = true;
            //
            // delete an '*' at the end of the type name

            // remove a 'const ' from start of string
            // remove a 'volatile ' from start of string
            name = name.Replace("const", "");
            name = name.Replace("volatile", "");
            name = name.Replace("*", "");
            name = name.Trim();

            if (isPointer) {
                string queryIsPointer = @"SELECT o.object_id As OBJECT_ID
                            FROM  t_object  o
                            INNER  JOIN  t_objectproperties  p ON  o.object_id  =  p.object_id
                            where property = 'typeSynonyms' AND
                                  Object_Type in ('Class','PrimitiveType','DataType','Enumeration')  AND
                                  p.value = '" + name + "*' " +
                            @" UNION
                               Select o.object_id
                               From t_object o
                                        where Object_Type in ('Class','PrimitiveType','DataType','Enumeration') AND name = '" + name + "*' ";
                string strIsPointer = rep.SQLQuery(queryIsPointer);
                XmlDocument XmlDocIsPointer = new XmlDocument();
                XmlDocIsPointer.LoadXml(strIsPointer);

                XmlNode operationGUIDNodeIsPointer = XmlDocIsPointer.SelectSingleNode("//OBJECT_ID");
                if (operationGUIDNodeIsPointer != null)
                {
                    intReturn = Convert.ToInt32(operationGUIDNodeIsPointer.InnerText);
                }     
            }

            if (intReturn == 0)
            {
                //if (name.Equals("void") || name.Equals("void*")) return 0;
                string query = @"SELECT o.object_id As OBJECT_ID
                            FROM  t_object  o
                            INNER  JOIN  t_objectproperties  p ON  o.object_id  =  p.object_id
                            where property = 'typeSynonyms' AND
                                  Object_Type in ('Class','PrimitiveType','DataType','Enumeration')  AND
                                  p.value = '" + name + "' " +
                                @" UNION
                               Select o.object_id
                               From t_object o
                                        where Object_Type in ('Class','PrimitiveType','DataType','Enumeration') AND name = '" + name + "' ";
                string str = rep.SQLQuery(query);
                XmlDocument XmlDoc = new XmlDocument();
                XmlDoc.LoadXml(str);

                XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//OBJECT_ID");
                if (operationGUIDNode != null)
                {
                    intReturn = Convert.ToInt32(operationGUIDNode.InnerText);
                }
            }

            
            return intReturn;
        }
        //------------------------------------------------------------------------------------------------------------------------------------
        // Find the Parameter of a Activity
        //------------------------------------------------------------------------------------------------------------------------------------
        // par Parameter of Operation (only if isReturn = false)
        // act Activity
        public static EA.Element  getParameterFromActivity(EA.Repository rep, EA.Parameter par, EA.Element act, Boolean isReturn = false)
        {

            string aliasName;
            if (isReturn)
            {
                aliasName = "return:";
            }
            else
            {
                aliasName = "par_" + par.Position.ToString();
            }

            EA.Element parTrgt = null;
            string query = @"select o2.ea_guid AS CLASSIFIER_GUID
                      from t_object o1 INNER JOIN t_object o2 on ( o2.parentID = o1.object_id)
                      where o1.Object_ID = " + act.ElementID.ToString() + 
                             " AND  o2.Alias like '"+ aliasName + getWildCard(rep) + "'";
            string str = rep.SQLQuery(query); 
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//CLASSIFIER_GUID");
            if (operationGUIDNode != null)
            {
                string GUID = operationGUIDNode.InnerText;
                parTrgt = rep.GetElementByGuid(GUID);
            }
            return parTrgt;
        }

        // Find the calling operation from a Call Operation Action
        public static EA.Method getOperationFromAction(EA.Repository rep, EA.Element action)
        {
            EA.Method method = null;
            string query = @"select o.Classifier_guid AS CLASSIFIER_GUID
                      from t_object o 
                      where o.Object_ID = " + action.ElementID.ToString();
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//CLASSIFIER_GUID");
            if (operationGUIDNode != null)
            {
                string GUID = operationGUIDNode.InnerText;
                method = rep.GetMethodByGuid(GUID);
            }
            return method;
        }
        // Find the calling operation from a Call Operation Action
        public static string getParameterType(EA.Repository rep, string actionPinGuid)
        {
            string query = @"SELECT par.type AS OPTYPE 
			    from t_object o  inner join t_operationparams par on (o.classifier_guid = par.ea_guid)
                where o.ea_guid = '" + actionPinGuid + "' ";
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode typeGUIDNode = XmlDoc.SelectSingleNode("//OPTYPE");
            if (typeGUIDNode != null)
            {
                return typeGUIDNode.InnerText;
                
            }
            return "";
        }


        // Find the calling operation from a Call Operation Action
        public static EA.Method getOperationFromCallAction(EA.Repository rep, EA.Element obj)
        {
            string wildCard = getWildCard(rep);
            string query = @"SELECT op.ea_guid AS OPERATION from (t_object o inner join t_operation op on (o.classifier_guid = op.ea_guid))
               inner join t_xref x on (x.client = o.ea_guid)
			   where x.name = 'CustomProperties' and
			             x.description like '"+ wildCard + "CallOperation" + wildCard + 
                         "' and o.object_id = " + obj.ElementID;
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//OPERATION");
            string GUID = "";
            if (operationGUIDNode != null)
            {
                GUID = operationGUIDNode.InnerText;
                return rep.GetMethodByGuid(GUID);
            }
            return null;
        }
        // Find the calling operation from a Call Operation Action
        public static string getClassifierGUID(EA.Repository rep,string GUID)
        {
            string query = @"select o.Classifier_guid AS CLASSIFIER_GUID
                      from t_object o 
                      where o.EA_GUID = '" + GUID + "'";
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//CLASSIFIER_GUID");
            GUID = "";
            if (operationGUIDNode != null)
            {
                GUID = operationGUIDNode.InnerText;
            }
            return GUID;
        }


        // Gets the trigger associated with the client (element, connector)
        public static string getTrigger(EA.Repository rep, string GUID)
        {
            string query = @"select x.Description AS TRIGGER_GUID
                      from t_xref x 
                      where x.Client = '" + GUID + "'    AND behavior = 'trigger' ";
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//TRIGGER_GUID");
            GUID = "";
            if (operationGUIDNode != null)
            {
                GUID = operationGUIDNode.InnerText;
            }
            return GUID;
        }
        // Gets the signal associated with the element
        public static string getSignal(EA.Repository rep, string GUID)
        {
            string query = @"select x.Description AS SIGNAL_GUID
                      from t_xref x 
                      where x.Client = '" + GUID + "'    AND behavior = 'event' ";
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//SIGNAL_GUID");
            GUID = "";
            if (operationGUIDNode != null)
            {
                GUID = operationGUIDNode.InnerText;
            }
            return GUID;
        }
        // Gets the signal associated with the element
        public static string getElementFromCompositeDiagram(EA.Repository rep, string GUID)
        {
            string query = @"select o.ea_guid AS SIGNAL_GUID
                      from t_xref x INNER JOIN t_object o on (x.client = o.ea_guid and type = 'element property')
                      where x.supplier = '" + GUID + "'    ";
            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//SIGNAL_GUID");
            GUID = "";
            if (operationGUIDNode != null)
            {
                GUID = operationGUIDNode.InnerText;
            }
            return GUID;
        }
        // set "ShowBeh=1; in operation field StyleEx

        public static Boolean setShowBehaviorInDiagram(EA.Repository rep, EA.Method m)
        {
            string updateStr = @"update t_operation set StyleEx = 'ShowBeh=1;'"  +
                       " where operationID = " + m.MethodID.ToString();
            rep.Execute(updateStr);
            return true;
        }
        
        public static Boolean setFrameLinksToDiagram(EA.Repository rep, EA.Element frm, EA.Diagram dia)
        {
            string updateStr = @"update t_object set pdata1 = "+ dia.DiagramID + 
                       " where object_ID = " + frm.ElementID.ToString();
            rep.Execute(updateStr);
            return true;
        }
        public static Boolean setElementPDATA1(EA.Repository rep, EA.Element el, string s)
        {
            string updateStr = @"update t_object set pdata1 = '"+ s +"' " +
                       " where object_ID = " + el.ElementID.ToString();
            rep.Execute(updateStr);
            return true;
        }
        
        public static Boolean setDiagramHasAttchaedLink(EA.Repository rep, EA.Element el)
        {
            setElementPDATA1(rep,el,"Diagram Note"); 
            return true;
        }
        public static Boolean setVCFlags (EA.Repository rep, EA.Package pkg, string flags)
        {
            string updateStr = @"update t_package set packageflags = '" + flags +"' " +
                       " where package_ID = " + pkg.PackageID.ToString();
            rep.Execute(updateStr);
            return true;
        }

        public static Boolean setElementHasAttchaedLink(EA.Repository rep, EA.Element el, EA.Element elNote)
        {
            string updateStr = @"update t_object set pdata1 = 'Element Note', pdata2 = '" + el.ElementID.ToString()  + "', pdata4='Yes' " +
           " where object_ID = " + elNote.ElementID.ToString() ;
            rep.Execute(updateStr);


            return true;
        }

        public static Boolean setBehaviorForOperation(EA.Repository rep, EA.Method op, EA.Element act)
        {
            
            string updateStr = @"update t_operation set behaviour = '" + act.ElementGUID + "' " +
           " where operationID = " + op.MethodID.ToString();
            rep.Execute(updateStr);


            return true;
        }

        // Find the operation from Activity / State Machine
        public static EA.Method getOperationFromBrehavior(EA.Repository rep, EA.Element el)
        {
            EA.Method method = null;
            string query = "";
            string conString = getConnectionString(rep); // due to shortcuts
            if (conString.Contains("DBType=3"))
            {   // Oracle DB
                query = 
                    @"select op.ea_guid AS EA_GUID
                      from t_operation op 
                      where Cast(op.Behaviour As Varchar2(38)) = '" + el.ElementGUID + "' ";
            }
            if (conString.Contains("DBType=1"))
                // SQL Server
            {    query = 
                      @"select op.ea_guid AS EA_GUID
                        from t_operation op 
                        where Substring(op.Behaviour,1,38) = '" + el.ElementGUID + "'" ;

            }

            if (conString.Contains(".eap"))
                // SQL Server
            {     query = 
                      @"select op.ea_guid AS EA_GUID
                        from t_operation op 
                        where op.Behaviour = '" + el.ElementGUID + "'" ;

            }
            if ((! conString.Contains("DBType=1")) &&  // SQL Server, DBType=0 MySQL
               (!  conString.Contains("DBType=3")) &&  // Oracle
               (!  conString.Contains(".eap")))// Access
            {
                query =
                  @"select op.ea_guid AS EA_GUID
                        from t_operation op 
                        where op.Behaviour = '" + el.ElementGUID + "'";

            }

            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//EA_GUID");
            if (operationGUIDNode != null)
            {
                string GUID = operationGUIDNode.InnerText;
                method = rep.GetMethodByGuid(GUID);
            }
            return method;
        }

//        // read PDATA1
//        public static EA.Element getPDATA(EA.Repository rep, int ID)
//        {
//            EA.Element el = null;
//            string query = "";
//            query =
//                    @"select pdata1 AS PDATA1
//                      from t_object o 
//                      where Cast(op.Behaviour As Varchar2(38)) = '" + el.ElementGUID + "'";

//            if (rep.ConnectionString.Contains("DBType=3"))
//            {   // Oracle DB
//                query =
//                    @"select op.ea_guid AS EA_GUID
//                      from t_operation op 
//                      where Cast(op.Behaviour As Varchar2(38)) = '" + el.ElementGUID + "'";
//            }
//            if (rep.ConnectionString.Contains("DBType=1"))
//            // SQL Server
//            {
//                query =
//                     @"select op.ea_guid AS EA_GUID
//                        from t_operation op 
//                        where Substring(op.Behaviour,1,38) = '" + el.ElementGUID + "'";

//            }

//            if (rep.ConnectionString.Contains(".eap"))
//            // SQL Server
//            {
//                query =
//                    @"select op.ea_guid AS EA_GUID
//                        from t_operation op 
//                        where op.Behaviour = '" + el.ElementGUID + "'";

//            }
//            if ((!rep.ConnectionString.Contains("DBType=1")) &&  // SQL Server, DBType=0 MySQL
//               (!rep.ConnectionString.Contains("DBType=3")) &&  // Oracle
//               (!rep.ConnectionString.Contains(".eap")))// Access
//            {
//                query =
//                  @"select op.ea_guid AS EA_GUID
//                        from t_operation op 
//                        where op.Behaviour = '" + el.ElementGUID + "'";

//            }

//            string str = rep.SQLQuery(query);
//            XmlDocument XmlDoc = new XmlDocument();
//            XmlDoc.LoadXml(str);

//            XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//EA_GUID");
//            if (operationGUIDNode != null)
//            {
//                string GUID = operationGUIDNode.InnerText;
//                method = rep.GetMethodByGuid(GUID);
//            }
//            return method;
//        }



        public static EA.Method getOperationFromConnector(EA.Repository rep, EA.Connector con)
        {
            EA.Method method = null;
            string query = "";
            if (getConnectionString(rep).Contains("DBType=3"))
                //pdat3: 'Activity','Sequence', (..)
            {   // Oracle DB
                query =
                    @"select description AS EA_GUID
                      from t_xref x 
                      where Cast(x.client As Varchar2(38)) = '" + con.ConnectorGUID + "'" +
                                                                " AND Behavior = 'effect' ";
            }
            if (getConnectionString(rep).Contains("DBType=1"))
            {   // SQL Server

                query =
                      @"select description AS EA_GUID
                        from t_xref x 
                        where Substring(x.client,1,38) = " + "'" + con.ConnectorGUID + "'" +
                           " AND Behavior = 'effect' "                   
                                          ;
            }
            if (getConnectionString(rep).Contains(".eap"))
            {

                query =
                      @"select description AS EA_GUID
                        from t_xref x 
                        where client = " + "'" + con.ConnectorGUID + "'" +
                           " AND Behavior = 'effect' "
                                          ;
            }
            if ((! getConnectionString(rep).Contains("DBType=1")) &&  // SQL Server, DBType=0 MySQL
                (! getConnectionString(rep).Contains("DBType=3")) &&  // Oracle
                (! getConnectionString(rep).Contains(".eap")))// Access
            {
                query =
                @"select description AS EA_GUID
                        from t_xref x 
                        where client = " + "'" + con.ConnectorGUID + "'" +
                             " AND Behavior = 'effect' "
                                            ;

            }


            string str = rep.SQLQuery(query);
            XmlDocument XmlDoc = new XmlDocument();
            XmlDoc.LoadXml(str);

            //string type = "";
            //XmlNode pdat3Node = XmlDoc.SelectSingleNode("//PDAT3");
            //if (pdat3Node != null)
            //{
            //    type = pdat3Node.InnerText;
                
            //}
            //if ( type.EndsWith(")")) // Operation
            //{ 
            string GUID = null;
                XmlNode operationGUIDNode = XmlDoc.SelectSingleNode("//EA_GUID");
                if (operationGUIDNode != null)
                {
                    GUID = operationGUIDNode.InnerText;
                    method = rep.GetMethodByGuid(GUID);
                }
                if (method == null)
                {

                     OpenBehaviorForElement(rep, rep.GetElementByGuid(GUID));
                }
            //}

            return method;
        }
        public static void updateVC(EA.Repository rep, EA.Package pkg)
        {
            if (pkg.IsVersionControlled)
            {
                // find                  VC=...;
                // replace by:           VC=currentState();
                string flags = pkg.Flags;
                Regex pattern = new Regex(@"VC=[^;]+;");
                Match regMatch = pattern.Match(flags);
                while (regMatch.Success)
                {
                    // delete old string
                    flags = flags.Replace(regMatch.Value, "");
                    regMatch = regMatch.NextMatch();
                    // add new string
                }
                flags = flags + "VC=" + getVCstate(pkg, false) + ";";
                try
                {
                    setVCFlags(rep, pkg, flags);
                }
                catch (Exception e)
                {
                    string s = e.Message + " ;" + pkg.GetLastError();
                    s = s + "!";
                }


            }
            // recursive package
            foreach (EA.Package pkg1 in pkg.Packages)
            {
                updateVC(rep, pkg1);
            }
        }

        //------------------------------------------------------------------------------------------
        // resetVCRecursive   If package is controlles: Reset packageflags field of package, work for all packages recursive 
        //------------------------------------------------------------------------------------------
        // packageflags:  Recurse=0;VCCFG=unchanged;
        public static void resetVCRecursive(EA.Repository rep, EA.Package pkg)
        {
            resetVC(rep, pkg);
            foreach (EA.Package p in pkg.Packages)
            {
                resetVC(rep, pkg);
            }
        }
        //------------------------------------------------------------------------------------------
        // resetVC   If package is controlles: Reset packageflags field of package 
        //------------------------------------------------------------------------------------------
        // packageflags:  Recurse=0;VCCFG=unchanged;
        public static void resetVC(EA.Repository rep, EA.Package pkg)
        {
            if (pkg.IsVersionControlled)
            {
                // find                  VC=...;
                string flags = pkg.Flags;
                Regex pattern = new Regex(@"VCCFG=[^;]+;");
                Match regMatch = pattern.Match(flags);
                if (regMatch.Success)
                {
                    // delete old string
                    flags = @"Recurse=0;" + regMatch.Value;
                }
                else
                {
                    return;
                }
                // write flags
                try
                {
                    setVCFlags(rep, pkg, flags);
                }
                catch (Exception e)
                {
                    string s = e.Message + " ;" + pkg.GetLastError();
                    s = s + "!";
                }


            }
            // recursive package
            //foreach (EA.Package pkg1 in pkg.Packages)
            //{
            //    updateVC(rep, pkg1);
            //}
        }
        public static string getVCstate(EA.Package pkg, Boolean isLong) {
                        long state = 0;
                        string[] checkedOutStatusLong = { "Uncontrolled",
                                                      "Checked in",
                                                      "Checked out to this user",
                                                      "Read only version",
                                                      "Checked out to another user",
                                                      "Offline checked in",
                                                      "Offline checked out by user",
                                                      "Offline checked out by other user", 
                                                      "Deleted" };
                        string[] checkedOutStatusShort = { "Uncontrolled",
                                                      "Checked in",
                                                      "Checked out",
                                                      "Read only",
                                                      "Checked out",
                                                      "Offline checked in",
                                                      "Offline checked out",
                                                      "Offline checked out", 
                                                      "Deleted" };

                        try
                        {
                            state = pkg.VersionControlGetStatus();
                        }
                        catch (Exception e)
                        {
                            if (isLong) return "VC State Error: " + e.Message;
                            else return "State Error";
                        }

                        if (isLong) return checkedOutStatusLong[state];
                        else return checkedOutStatusShort[state];
        }
        public static string getFilePath(EA.Repository rep, EA.Package pkg)
        {
            string path = "";
            // Get VCCFG=...;
            Regex pattern = new Regex(@"VCCFG=[^;]+");
            Match regMatch = pattern.Match(pkg.Flags);
            string uniqueId = "";
            if (regMatch.Success)
            {
                // get VCCFG
                uniqueId = regMatch.Value.Substring(6);
                // get patch for UiqueId
                Environment.CurrentDirectory = Environment.GetEnvironmentVariable("appdata");
                string s1 = @"Sparx Systems\EA\paths.txt";
                TextReader tr = new StreamReader(s1);
                string line = "";
                pattern = new Regex(@"(id=" + uniqueId + @").+(path=[^;]+)");
                while ((line = tr.ReadLine()) != null)
                {

                    regMatch = pattern.Match(line);
                    if (regMatch.Success)
                    {
                        path = regMatch.Groups[2] + @"\" + pkg.XMLPath;
                        path = path.Substring(5);
                        break;
                    }


                }
                tr.Close();
                if (path == "")
                {
                    rep.WriteOutput("Debug", "VCCFG=... not found in" + s1 + " " + pkg.Name, 0);
                }
            }
            else
            {
                rep.WriteOutput("Debug", "VCCFG=... not found:" + pkg.Name, 0);
            }

            return path;
        }
       
        public static Boolean getLatest(EA.Repository rep, EA.Package pkg, Boolean recursive, ref int count, int level, ref int errorCount)
        {
            if (pkg.IsControlled)
            {
                level = level + 1;
                // check if checked out

                string path = Util.getFilePath(rep, pkg);
                string fText = "";
                //rep.WriteOutput("Debug", "Path:" + pkg.Name + path, 0);
                string sLevel = new string(' ', level * 2);
                rep.WriteOutput("Debug", sLevel + (count+1).ToString(",0") + " Work for:" + path, 0);
                if (path != "")
                {
                    count = count + 1;
                    rep.ShowInProjectView(pkg);
                    // delete a potential write protection
                    try
                    {
                        FileInfo fileInfo = new FileInfo(path);
                        FileAttributes attributes = (FileAttributes)(fileInfo.Attributes - FileAttributes.ReadOnly);
                        System.IO.File.SetAttributes(fileInfo.FullName, attributes);
                        System.IO.File.Delete(path);
                    }
                    catch (FileNotFoundException e)
                    {
                        fText = path + " " + e.Message.ToString();
                        rep.WriteOutput("Debug", fText, 0);
                        errorCount = errorCount + 1;
                    }
                    catch (DirectoryNotFoundException e)
                    {
                        fText = path + " " + e.Message.ToString();
                        rep.WriteOutput("Debug", fText, 0);
                        errorCount = errorCount + 1;
                    }
                    // get latest
                    try
                    {
                        // to make sure pkg is the correct reference
                        // new load of pkg after GetLatest
                        string pkgGUID = pkg.PackageGUID;
                        pkg.VersionControlGetLatest(true);
                        pkg = rep.GetPackageByGuid(pkgGUID);
                        count = count + 1;
                    }
                    catch
                    {
                        fText = path + " " + pkg.GetLastError();
                        rep.WriteOutput("Debug", fText, 0);
                        errorCount = errorCount + 1;
                    }

                }
                else
                {
                    fText = pkg.XMLPath + " invalid path";
                    rep.WriteOutput("Debug", fText, 0);
                    errorCount = errorCount + 1;

                }
            }

            //rep.WriteOutput("Debug", "Recursive:" +recursive.ToString(), 0);
            if (recursive)
            {
                //rep.WriteOutput("Debug","Recursive count:" + pkg.Packages.Count.ToString(), 0);
                // over all contained packages
                foreach (EA.Package pkgNested in pkg.Packages)
                {
                    //rep.WriteOutput("Debug", "Recursive:"+ pkgNested.Name, 0);
                    getLatest(rep, pkgNested, true, ref count, level, ref errorCount);

                }
            }
            return true;

        }
        public static string getConnectionString(EA.Repository rep) {
            string s = rep.ConnectionString;
            if (s.Contains("DBType="))
            {
                return s;
            }
            else
            {
                FileInfo f = new FileInfo(s);
                if (f.Length > 1025)
                {
                    return s;
                }
                else
                {
                    return System.IO.File.ReadAllText(s);
                }
            }
            

        }
        public static void OpenBehaviorForElement(EA.Repository Repository, EA.Element el)
        {
            // find the diagram
            if (el.Diagrams.Count > 0)
            {
                // get the diagram
                EA.Diagram dia = (EA.Diagram)el.Diagrams.GetAt(0);
                // open diagram
                Repository.OpenDiagram(dia.DiagramID);
            }
            // no diagram found, select element
            Repository.ShowInProjectView(el);
        }
    }
}
